# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nViyuIQQtkD_QNXDioBsh20IERxYyDfC
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import torch
import torch.nn as nn
from transformers import DistilBertTokenizer, DistilBertModel
import numpy as np
import json
import os

app = Flask(__name__)
CORS(app)

# Load config
with open('model/config.json', 'r') as f:
    CONFIG = json.load(f)

device = torch.device('cpu')  # Railway uses CPU

# Model architecture
class DepressionPTSDModel(nn.Module):
    def __init__(self, dropout=0.3):
        super(DepressionPTSDModel, self).__init__()
        self.bert = DistilBertModel.from_pretrained('distilbert-base-uncased')
        self.dropout = nn.Dropout(dropout)
        self.classifier = nn.Linear(768, 2)  # 2 outputs: depression, ptsd
        self.sigmoid = nn.Sigmoid()

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.last_hidden_state[:, 0]
        pooled_output = self.dropout(pooled_output)
        logits = self.classifier(pooled_output)
        return self.sigmoid(logits)

# Load model
print("Loading model...")
model = DepressionPTSDModel(dropout=CONFIG['dropout'])
model.load_state_dict(torch.load('model/best_model.pt', map_location=device))
model.eval()

tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        data = request.json
        text = data.get('transcript', '')

        # Tokenize
        inputs = tokenizer(text, return_tensors='pt', truncation=True,
                          padding=True, max_length=512)

        # Predict
        with torch.no_grad():
            outputs = model(inputs['input_ids'], inputs['attention_mask'])
            probs = outputs.numpy()[0]

        depression_prob = float(probs[0])
        ptsd_prob = float(probs[1])

        # Determine levels using chatbot tiers
        dep_level = 'minimal'
        if depression_prob >= 0.74:
            dep_level = 'moderate'
        elif depression_prob >= 0.93:
            dep_level = 'severe'
        elif depression_prob >= 0.4:
            dep_level = 'low'

        # Convert to PHQ-8 (for n8n compatibility)
        phq8 = int(depression_prob * 24)

        return jsonify({
            'depression_probability': depression_prob,
            'depression_level': dep_level,
            'ptsd_probability': ptsd_prob,
            'phq8_score': phq8,
            'needs_intervention': depression_prob > 0.74
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)